import mysql.connector
from datetime import datetime
import re

def connect_db():
    connection = mysql.connector.connect(
        host="localhost",
        user="root", password="", database="lab_eq_tracker")
    print("Connected to MySQL database")
    return connection

def create_tables():
    connection = connect_db()
    cursor = connection.cursor()
    tables = [
        ("chem_chemicals", "Chemicals"),
        ("chem_apparatus", "Apparatus"),
        ("phys_measuring_instruments", "Measuring Instruments"),
        ("phys_optical_instruments", "Optical Instruments"),
        ("phys_electrical_instruments", "Electrical Instruments"),
        ("phys_thermal_instruments", "Thermal Instruments"),
        ("phys_acoustic_instruments", "Acoustic Instruments"),
        ("bio_microscopes", "Microscopes"),
        ("bio_specimens_slides", "Specimens and Slides"),
        ("bio_dissection_tools", "Dissection Tools")
    ]
    for table, _ in tables:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS %s (
                id INT PRIMARY KEY AUTO_INCREMENT,
                name VARCHAR(255) NOT NULL,
                status ENUM('In Use', 'Free', 'Damaged') NOT NULL,
                quantity INT NOT NULL CHECK (quantity >= 0),
                CHECK (id BETWEEN 100 AND 999)
            ) AUTO_INCREMENT = 100
        """ % table)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS reservations (
            reservation_id INT PRIMARY KEY AUTO_INCREMENT,
            equipment_id INT NOT NULL,
            lab VARCHAR(50) NOT NULL,
            category VARCHAR(50) NOT NULL,
            user_name VARCHAR(255) NOT NULL,
            user_id VARCHAR(10) NOT NULL,
            reservation_date DATE NOT NULL,
            quantity_reserved INT NOT NULL CHECK (quantity_reserved > 0)
        )
    """)
    connection.commit()
    cursor.close()
    connection.close()

def add_equipment(table, lab, category):
    connection = connect_db()
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT(*) FROM %s" % table)
    count = cursor.fetchone()[0]
    if count >= 900:
        print("Cannot add more equipment: ID limit reached")
        cursor.close()
        connection.close()
        return
    name = input("Enter equipment name: ")
    status = input("Enter status (In Use, Free, Damaged): ")
    if status not in ["In Use", "Free", "Damaged"]:
        print("Invalid status! Must be 'In Use', 'Free', or 'Damaged'")
        cursor.close()
        connection.close()
        return
    try:
        quantity = int(input("Enter quantity: "))
        if quantity < 0:
            print("Quantity must be non-negative")
            cursor.close()
            connection.close()
            return
    except ValueError:
        print("Invalid quantity! Must be a number")
        cursor.close()
        connection.close()
        return
    query = "INSERT INTO %s (name, status, quantity) VALUES (%%s, %%s, %%s)" % table
    cursor.execute(query, (name, status, quantity))
    connection.commit()
    print("Equipment added successfully")
    cursor.close()
    connection.close()

def view_equipment(table, lab, category):
    connection = connect_db()
    cursor = connection.cursor()
    query = "SELECT * FROM %s" % table
    cursor.execute(query)
    results = cursor.fetchall()
    if results:
        print("\n%s - %s Equipment List:" % (lab, category))
        print("ID | Name | Status | Quantity")
        print("-" * 50)
        for row in results:
            print("%s | %s | %s | %s" % (row[0], row[1], row[2], row[3]))
    else:
        print("No equipment found in %s - %s" % (lab, category))
    cursor.close()
    connection.close()

def update_equipment(table, lab, category):
    equipment_id = input("Enter equipment ID to update: ")
    name = input("Enter new name (or press Enter to keep unchanged): ")
    status = input("Enter new status (In Use, Free, Damaged, or press Enter to keep unchanged): ")
    quantity_input = input("Enter new quantity (or press Enter to keep unchanged): ")
    if status and status not in ["In Use", "Free", "Damaged"]:
        print("Invalid status! Must be 'In Use', 'Free', or 'Damaged'")
        return
    if quantity_input:
        try:
            quantity = int(quantity_input)
            if quantity < 0:
                print("Quantity must be non-negative")
                return
        except ValueError:
            print("Invalid quantity! Must be a number")
            return
    else:
        quantity = None
    connection = connect_db()
    cursor = connection.cursor()
    query = "UPDATE %s SET " % table
    updates = []
    values = []
    if name:
        updates.append("name = %s")
        values.append(name)
    if status:
        updates.append("status = %s")
        values.append(status)
    if quantity is not None:
        updates.append("quantity = %s")
        values.append(quantity)
    if updates:
        query += ", ".join(updates) + " WHERE id = %s"
        values.append(equipment_id)
        cursor.execute(query, values)
        connection.commit()
        if cursor.rowcount > 0:
            print("Equipment updated successfully")
        else:
            print("No equipment found with that ID")
    else:
        print("No updates provided")
    cursor.close()
    connection.close()

def delete_equipment(table, lab, category):
    equipment_id = input("Enter equipment ID to delete: ")
    connection = connect_db()
    cursor = connection.cursor()
    query = "DELETE FROM %s WHERE id = %s" % (table, equipment_id)
    cursor.execute(query)
    connection.commit()
    if cursor.rowcount > 0:
        print("Equipment deleted successfully")
    else:
        print("No equipment found with that ID")
    cursor.close()
    connection.close()

def reserve_equipment(table, lab, category, user_id):
    equipment_id = input("Enter equipment ID to reserve: ")
    user_name = input("Enter your name: ")
    reservation_date = input("Enter reservation date (YYYY-MM-DD): ")
    try:
        quantity_reserved = int(input("Enter quantity to reserve: "))
        if quantity_reserved <= 0:
            print("Quantity to reserve must be positive")
            return
    except ValueError:
        print("Invalid quantity! Must be a number")
        return
    if not reservation_date or len(reservation_date) != 10 or reservation_date[4] != '-' or reservation_date[7] != '-':
        print("Invalid date format! Use YYYY-MM-DD")
        return
    connection = connect_db()
    cursor = connection.cursor()
    cursor.execute("SELECT status, quantity FROM %s WHERE id = %s" % (table, equipment_id))
    result = cursor.fetchone()
    if not result:
        print("No equipment found with that ID")
        cursor.close()
        connection.close()
        return
    status, available_quantity = result
    if status != "Free":
        print("Equipment is not available for reservation (must be Free)")
        cursor.close()
        connection.close()
        return
    if available_quantity < quantity_reserved:
        print("Not enough equipment available. Available quantity: %s" % available_quantity)
        cursor.close()
        connection.close()
        return
    cursor.execute("INSERT INTO reservations (equipment_id, lab, category, user_name, user_id, reservation_date, quantity_reserved) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                  (equipment_id, lab, category, user_name, user_id, reservation_date, quantity_reserved))
    new_quantity = available_quantity - quantity_reserved
    cursor.execute("UPDATE %s SET quantity = %s WHERE id = %s" % (table, "%s", equipment_id), (new_quantity,))
    if new_quantity == 0:
        cursor.execute("UPDATE %s SET status = 'In Use' WHERE id = %s" % (table, equipment_id))
    connection.commit()
    print("Equipment reserved successfully")
    cursor.close()
    connection.close()

def view_reservations(lab, category):
    connection = connect_db()
    cursor = connection.cursor()
    query = "SELECT reservation_id, equipment_id, user_name, user_id, reservation_date, quantity_reserved FROM reservations WHERE lab = %s AND category = %s"
    cursor.execute(query, (lab, category))
    results = cursor.fetchall()
    if results:
        print("\n%s - %s Reservations:" % (lab, category))
        print("Reservation ID | Equipment ID | User | User ID | Date | Quantity Reserved")
        print("-" * 80)
        for row in results:
            print("%s | %s | %s | %s | %s | %s" % (row[0], row[1], row[2], row[3], row[4], row[5]))
    else:
        print("No reservations found in %s - %s" % (lab, category))
    cursor.close()
    connection.close()

def category_menu(lab, category, table, user_role):
    while True:
        print("\n%s Lab - %s" % (lab, category))
        if user_role == "Lab In-Charge":
            print("1. Add Equipment")
            print("2. View Equipment")
            print("3. Update Equipment")
            print("4. Delete Equipment")
            print("5. Reserve Equipment")
            print("6. View Reservations")
            print("7. Back")
            choice = input("Enter choice: ")
            if choice == '1':
                add_equipment(table, lab, category)
            elif choice == '2':
                view_equipment(table, lab, category)
            elif choice == '3':
                update_equipment(table, lab, category)
            elif choice == '4':
                delete_equipment(table, lab, category)
            elif choice == '5':
                reserve_equipment(table, lab, category, user_role)
            elif choice == '6':
                view_reservations(lab, category)
            elif choice == '7':
                break
            else:
                print("Invalid choice! Please try again.")
        else:  # Student
            print("1. View Equipment")
            print("2. Reserve Equipment")
            print("3. View Reservations")
            print("4. Back")
            choice = input("Enter choice: ")
            if choice == '1':
                view_equipment(table, lab, category)
            elif choice == '2':
                reserve_equipment(table, lab, category, user_role)
            elif choice == '3':
                view_reservations(lab, category)
            elif choice == '4':
                break
            else:
                print("Invalid choice! Please try again.")

def chemistry_menu(user_id, user_role):
    while True:
        print("\nChemistry Lab")
        print("1. Chemicals")
        print("2. Apparatus")
        print("3. Back")
        choice = input("Enter choice: ")
        if choice == '1':
            category_menu("Chemistry", "Chemicals", "chem_chemicals", user_role)
        elif choice == '2':
            category_menu("Chemistry", "Apparatus", "chem_apparatus", user_role)
        elif choice == '3':
            break
        else:
            print("Invalid choice! Please try again.")

def physics_menu(user_id, user_role):
    while True:
        print("\nPhysics Lab")
        print("1. Measuring Instruments")
        print("2. Optical Instruments")
        print("3. Electrical Instruments")
        print("4. Thermal Instruments")
        print("5. Acoustic Instruments")
        print("6. Back")
        choice = input("Enter choice: ")
        if choice == '1':
            category_menu("Physics", "Measuring Instruments", "phys_measuring_instruments", user_role)
        elif choice == '2':
            category_menu("Physics", "Optical Instruments", "phys_optical_instruments", user_role)
        elif choice == '3':
            category_menu("Physics", "Electrical Instruments", "phys_electrical_instruments", user_role)
        elif choice == '4':
            category_menu("Physics", "Thermal Instruments", "phys_thermal_instruments", user_role)
        elif choice == '5':
            category_menu("Physics", "Acoustic Instruments", "phys_acoustic_instruments", user_role)
        elif choice == '6':
            break
        else:
            print("Invalid choice! Please try again.")

def biology_menu(user_id, user_role):
    while True:
        print("\nBiology Lab")
        print("1. Microscopes")
        print("2. Specimens and Slides")
        print("3. Dissection Tools")
        print("4. Back")
        choice = input("Enter choice: ")
        if choice == '1':
            category_menu("Biology", "Microscopes", "bio_microscopes", user_role)
        elif choice == '2':
            category_menu("Biology", "Specimens and Slides", "bio_specimens_slides", user_role)
        elif choice == '3':
            category_menu("Biology", "Dissection Tools", "bio_dissection_tools", user_role)
        elif choice == '4':
            break
        else:
            print("Invalid choice! Please try again.")

def login_menu():
    while True:
        print("\nLab Equipment Tracker - Login")
        user_id = input("Enter your ID : ")
        if re.match(r"^(EMP|STD)_\d{4}$", user_id):
            user_role = "Lab In-Charge" if user_id.startswith("EMP_") else "Student"
            return user_id, user_role
        elif user_id.lower() == "exit":
            print("Exiting program")
            return None, None
        else:
            print("Invalid ID format! Use EMP_XXXX or STD_XXXX (XXXX is a 4-digit number) or type 'exit' to quit.")

def main():
    create_tables()
    user_id, user_role = login_menu()
    if user_id is None:
        return
    while True:
        print("\nLab Equipment Tracker")
        print("1. Chemistry")
        print("2. Physics")
        print("3. Biology")
        print("4. Exit")
        choice = input("Enter choice: ")
        if choice == '1':
            chemistry_menu(user_id, user_role)
        elif choice == '2':
            physics_menu(user_id, user_role)
        elif choice == '3':
            biology_menu(user_id, user_role)
        elif choice == '4':
            print("Exiting program")
            break
        else:
            print("Invalid choice! Please try again.")

main()
